<!
File: FullyMeshedNet.st
 
Copyright (C) 2019 FREVO project contributors

Universitaet Klagenfurt licenses this file to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance with the License. You may obtain a
copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License
is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
or implied. See the License for the specific language governing permissions and limitations under
the License.
!>

FullyMeshedNet(namespace,inputCount,outputCount,hiddenNodeCount,iterationCount,activationFunction,biases,weights,randomBiases) ::= <<

#ifndef CANDIDATE_H
#define CANDIDATE_H

// Generated by frevo-cpp-export

#include "fullymeshednet.h"

namespace candidate {

    const int iteration_count = <iterationCount>;
    const int input_count = <inputCount>;
    const int output_count = <outputCount>;
    const int hidden_node_count = <hiddenNodeCount>;
    const int node_count = input_count + hidden_node_count + output_count;
    const int hidden_node_count = <hiddenNodeCount>;
    const int iteration_count = <iterationCount>;
    const frevo::ActivationFunction activation_function = frevo::ActivationFunction::<activationFunction>;

    const float weights[node_count][node_count] =  {<weights:{w1|{<w1:{w2|<w2>f}; separator=", ">\}}; separator=", ">};
    const float biases[node_count] = {<biases:{b|<b>f}; separator=", ">};
    const float random_biases[node_count] = {<randomBiases:{b|<b>f}; separator=", ">};

    float sums[node_count];
    float state[node_count];

    float random() {
        return 0;
    }

    frevo::FullyMeshedNet net;

    void init_candidate(){
        net.reset(input_count, output_count, hidden_count, activation_function,
          iteration_count, weights, biases, random_biases, states, sums, random);
    }

    void calculate(float input[], float output[]) {
        net.calculate(input, output);
    }

} // namespace candidate

#endif // CANDIDATE_H
>>